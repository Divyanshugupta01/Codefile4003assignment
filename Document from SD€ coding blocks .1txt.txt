
SUM OF EVEN AND ODDD DIGITS

#include<iostream>
using namespace std;
int main() {
    int n;
    cin>>n;

    int position=1;
    int sum_odd=0;
    int sum_even=0;
    int c;
    while(n>0){
      c=n%10;
      n=n/10;
      if(position%2==1){
          sum_odd=sum_odd+c;
      }else{
          sum_even=sum_even+c;
      }
      position++;
    }
    cout<<sum_odd<<endl;
    cout<<sum_even<<endl;
}


LCM


#include <iostream> 
using namespace std;
  

long long gcd(long long int n1, long long int n2)
{
  if (n2 == 0)
    return n1;
  return gcd(n2, n1 % n2);
}
  

long long lcm(int n1, int n2)
{
    return (n1/ gcd(n1, n2)) * n2;
}
   

int main() 
{ 
   int n1,n2;
   cin>>n1;
   cin>>n2;
   cout<<lcm(n1,n2);
   
}

chewbaca number


#include<iostream>
#include<cmath>
using namespace std;
int main() {
    long long n,dig,x=0,count=0;
    cin>>n;
    auto m=n;
    while(m>10)
{
    dig=m%10;

    dig=min(dig,9-dig);
    x=x+pow(10,count)*dig;

    m/=10;
    count++;
}

if(m==9)
x=x+pow(10,count)*m;
else 
{
    m=min(m,9-m);
    x=x+pow(10,count)*m;
}
cout<<x;
    return 0;
}

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 

#include<iostream>
using namespace std;
int main () {
	int n;
	cin >>n;
	for(int i=0;i<=n;i++){
		for (int j =1; j<=i; j++){
			cout<<j<<' ';
		}
		cout<<'\n';
	}
}



https://hack.codingblocks.com/app/contests/4214/131/problem





















Take an input N, a number. Take N more inputs and store that in an array. Take an input target, a number

a. Write a recursive function which prints subsets of the array which sum to target.

b. Write a recursive function which counts the number of subsets of the array which sum to target. Print the value returned.

Input Format
Take an input N, a number. Take N more inputs and store that in an array. Take an input target, a number

Constraints
None

Output Format
Display the number of subsets and print the subsets in a space separated manner.

Sample Input
3
1
2
3
3
Sample Output
1 2  3
2
Explanation
Add 2 spaces between 2 subset solutions


#include <iostream>
#include <vector>
using namespace std;

void print_subsets(vector<int>& arr, int target, int i, vector<int>& subset) {
    if (target == 0) {
        for (int j = 0; j < subset.size(); j++) {
            cout << subset[j] << " ";
        }
        //cout << endl;
        return;
    }
    if (i == arr.size()) {
        return;
    }
    if (arr[i] <= target) {
        
        subset.push_back(arr[i]);
        print_subsets(arr, target-arr[i], i+1, subset);
        subset.pop_back();
    }
    
    print_subsets(arr, target, i+1, subset);
}

int count_subsets(vector<int>& arr, int target, int i) {
    if (target == 0) {
        return 1;
    }
    if (i == arr.size()) {
        return 0;
    }
    int count = 0;
    if (arr[i] <= target) {
        
        count += count_subsets(arr, target-arr[i], i+1);
    }
    
    count += count_subsets(arr, target, i+1);
    return count;
}

int main() {
    int n;
	cin>>n;
	int x;
    vector<int> arr;
    for (int i = 0; i < n; i++) {
        cin >> x;
        arr.push_back(x);
    }
    int target;
    cin >> target;
    vector<int> subset;
    print_subsets(arr, target, 0, subset);
    cout <<endl;
    cout << count_subsets(arr, target, 0) ;
    return 0;
}






https://hack.codingblocks.com/app/contests/4003/1927/problem









For the given 2 dimensional matrix mat with r rows and c columns print the upper and the lower triangle of the matrix. Where,
Lower triangular matrix is a matrix of elements below the principle diagonal including the principle diagonal elements , rest elements are 0.
Upper triangular matrix is a matrix of elements above the principle diagonal including the principle diagonal elements , rest elements are 0.

Input Format
First line of the input contains two integers r,c denoting number of rows and number of columns. Next r*c line contains elements of the matrix.

Constraints
0<=r,c<=10
0<=mat[i][j]<=100

Output Format
2-D matrix representing Lower Triangular Martix 2-D matrix representing Upper Triangular Matrix.

Sample Input
3 3
1 2 3
4 5 6 
7 8 9
Sample Output
1 2 3
0 5 6
0 0 9


1 0 0 
4 5 0
7 8 9

Explanation
None.




#include <iostream>
using namespace std;
int main() {
    int r, c;
    cin>>r>>c;
    int matrix[r][c];
    for(int i =0;i<r; i++){
        for(int j =0;j<c;j++){
            cin>>matrix[i][j];
        }
    }
    for(int i =0; i<r; i++){
        for(int j =0;j <c;j++){
            if(i<=j){
                cout<<matrix[i][j]<<' ';
            }else{
                cout<<"0"<<' ';
            }
        }
        cout<<'\n';
    }
    for(int i =0; i<r; i++){
        for(int j =0;j <c;j++){
            if(i>=j){
                cout<<matrix[i][j]<<' ';
            }else{
                cout<<"0"<<' ';
            }
        }
        cout<<'\n';
    }
}



https://hack.codingblocks.com/app/contests/4003/2842/problem

Mili's Gallery


Mili has recently been assigned to get an old Art Gallery up and running. She was looking around for improvements needed to be done and found out there a too few paintings and artifacts. She wishes to add K more articles to the Gallery. However, for a better view, she wouldn’t place any two articles adjacently.
You are provided with an array A, of size N containing 0’s and 1’s representing the presence of an article the wall, where 0 means the spot is empty and 1 means the spot already has an article. Will Mili be able to add K more article without any two of them being placed adjacent.

Input Format
First line contains an integer N.
Second line contains N space-separated integers, 0’s and 1’s.
Third line contains K.

Constraints
1 <= N <= 105
0 <= K <= N
Ai = {0,1}

Output Format
Print “true” if its possible to add K more articles, without any of them being adjacent, else print “false”.

Sample Input
5
1 0 0 0 1
1
Sample Output
true
Explanation
You can place the article at 3rd position without violating the adjacency.







#include <bits/stdc++.h>
using namespace std;
int main() {
   
int n;
cin>>n;

vector<int>arr;
for(int i = 0;i<n;i++){
  int x;
  cin>>x;
  arr.push_back(x);
}
int total;
cin>>total;

for(int i = 0;i<n;i++){
  if(i-1>=0){
    if(arr[i-1] == 1){
      continue;
    }
  }
  if(i+1<n){
    if(arr[i+1]==1){
      continue;
    }
  }
  
  if(arr[i]==0){
    arr[i] = 1;
    total--;
  }
}

if(total<=0)cout<<"true"<<endl;
else cout<<"false"<<endl;

return 0;
}














